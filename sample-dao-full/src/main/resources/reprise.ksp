package io.vertigo.samples.reprise

create Task TK_INSERT_COUNTRIES_BATCH {
	storeName : "mine"
    className : "io.vertigo.dynamox.task.TaskEngineProcBatch"
        request : "
        	INSERT INTO MY_COUNTRY (COU_ID, NAME) values (#COUNTRY_LIST.0.COU_ID#, #COUNTRY_LIST.0.NAME#) 
			"
	attribute COUNTRY_LIST	 	{domain : DO_DT_COUNTRY_DTC		notNull:"true" 	inOut :"in"}
}


create Task TK_LOAD_COUNTRIES {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select * from COUNTRY
			"
	attribute COUNTRY_LIST	 	{domain : DO_DT_COUNTRY_DTC		notNull:"true" 	inOut :"out"}
}

create Task TK_COUNT_ACTORS {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select count(*) from ACTOR
			"
	attribute COUNT	 	{domain : DO_ID		notNull:"true" 	inOut :"out"}
}

create Task TK_INSERT_ACTORS_BATCH {
	storeName : "mine"
    className : "io.vertigo.dynamox.task.TaskEngineProcBatch"
        request : "
        	INSERT INTO MY_ACTOR (ACT_ID, NAME, SEXE) values (#ACTORS_LIST.0.ACT_ID#, #ACTORS_LIST.0.NAME#, #ACTORS_LIST.0.SEXE#) 
			"
	attribute ACTORS_LIST	 	{domain : DO_DT_ACTOR_DTC		notNull:"true" 	inOut :"in"}
}


create Task TK_LOAD_ACTORS_BY_CHUNK {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select * from ACTOR
			where ACT_ID > #OFFSET#
        	order by ACT_ID asc
			limit 1000
			"
	attribute LIMIT	 	{domain : DO_ID		notNull:"true" 	inOut :"in"}
	attribute OFFSET	 	{domain : DO_ID		notNull:"true" 	inOut :"in"}
	attribute ACTORS_LIST	 	{domain : DO_DT_ACTOR_DTC		notNull:"true" 	inOut :"out"}
}


create Task TK_COUNT_MOVIES {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select count(*) from MOVIE
        	where NAME like 'S%%'
			"
	attribute COUNT	 	{domain : DO_ID		notNull:"true" 	inOut :"out"}
}

create Task TK_INSERT_MOVIES_BATCH {
	storeName : "mine"
    className : "io.vertigo.dynamox.task.TaskEngineProcBatch"
        request : "
        	INSERT INTO MY_MOVIE (MOV_ID, NAME, YEAR, IMDBID, COU_ID) values (#MOVIES_LIST.0.MOV_ID#, #MOVIES_LIST.0.NAME#, #MOVIES_LIST.0.YEAR#, #MOVIES_LIST.0.IMDBID#, #MOVIES_LIST.0.COU_ID#) 
			"
	attribute MOVIES_LIST	 	{domain : DO_DT_MOVIE_DTC		notNull:"true" 	inOut :"in"}
}


create Task TK_LOAD_MOVIES_BY_CHUNK {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select * from movie
        	where MOV_ID > #OFFSET#
        	order by MOV_ID asc
        	limit #LIMIT#
			"
	attribute LIMIT	 	{domain : DO_ID		notNull:"true" 	inOut :"in"}
	attribute OFFSET	 	{domain : DO_ID		notNull:"true" 	inOut :"in"}
	attribute MOVIES_LIST	 	{domain : DO_DT_MOVIE_DTC		notNull:"true" 	inOut :"out"}
}


create Task TK_COUNT_ROLES {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select count(*) from ROLE rol
        	join movie mov on mov.MOV_ID = rol.MOV_ID
        	where mov.name like 'S%%'
			"
	attribute COUNT	 	{domain : DO_ID		notNull:"true" 	inOut :"out"}
}

create Task TK_INSERT_ROLES_BATCH {
	storeName : "mine"
    className : "io.vertigo.dynamox.task.TaskEngineProcBatch"
        request : "
        	INSERT INTO MY_ROLE (ROL_ID, MOV_ID, ACT_ID, AS_CHARACTER) values (#ROLES_LIST.0.ROL_ID#, #ROLES_LIST.0.MOV_ID#, #ROLES_LIST.0.ACT_ID#, #ROLES_LIST.0.AS_CHARACTER#) 
			"
	attribute ROLES_LIST	 	{domain : DO_DT_ROLE_DTC		notNull:"true" 	inOut :"in"}
}


create Task TK_LOAD_ROLES_BY_CHUNK {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
        request : "
        	select rol.* from role rol
        	where ROL_ID > #OFFSET#
        	order by rol.ROL_ID asc
        	limit #LIMIT#
			"
	attribute LIMIT	 	{domain : DO_ID		notNull:"true" 	inOut :"in"}
	attribute OFFSET	 	{domain : DO_ID		notNull:"true" 	inOut :"in"}
	attribute MOVIES_LIST	 	{domain : DO_DT_ROLE_DTC		notNull:"true" 	inOut :"out"}
}

